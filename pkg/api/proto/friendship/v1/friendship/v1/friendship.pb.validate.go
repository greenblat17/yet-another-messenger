// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: friendship/v1/friendship.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FriendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendRequestMultiError, or
// nil if none found.
func (m *FriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := FriendRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFriendId()) < 1 {
		err := FriendRequestValidationError{
			field:  "FriendId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FriendRequestMultiError(errors)
	}

	return nil
}

// FriendRequestMultiError is an error wrapping multiple validation errors
// returned by FriendRequest.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestMultiError) AllErrors() []error { return m }

// FriendRequestValidationError is the validation error returned by
// FriendRequest.Validate if the designated constraints aren't met.
type FriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestValidationError) ErrorName() string { return "FriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e FriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestValidationError{}

// Validate checks the field values on FriendResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendResponseMultiError,
// or nil if none found.
func (m *FriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return FriendResponseMultiError(errors)
	}

	return nil
}

// FriendResponseMultiError is an error wrapping multiple validation errors
// returned by FriendResponse.ValidateAll() if the designated constraints
// aren't met.
type FriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendResponseMultiError) AllErrors() []error { return m }

// FriendResponseValidationError is the validation error returned by
// FriendResponse.Validate if the designated constraints aren't met.
type FriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendResponseValidationError) ErrorName() string { return "FriendResponseValidationError" }

// Error satisfies the builtin error interface
func (e FriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendResponseValidationError{}

// Validate checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFriendRequestMultiError, or nil if none found.
func (m *RemoveFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := RemoveFriendRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFriendId()) < 1 {
		err := RemoveFriendRequestValidationError{
			field:  "FriendId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveFriendRequestMultiError(errors)
	}

	return nil
}

// RemoveFriendRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFriendRequestMultiError) AllErrors() []error { return m }

// RemoveFriendRequestValidationError is the validation error returned by
// RemoveFriendRequest.Validate if the designated constraints aren't met.
type RemoveFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFriendRequestValidationError) ErrorName() string {
	return "RemoveFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFriendRequestValidationError{}

// Validate checks the field values on RemoveFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFriendResponseMultiError, or nil if none found.
func (m *RemoveFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveFriendResponseMultiError(errors)
	}

	return nil
}

// RemoveFriendResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFriendResponseMultiError) AllErrors() []error { return m }

// RemoveFriendResponseValidationError is the validation error returned by
// RemoveFriendResponse.Validate if the designated constraints aren't met.
type RemoveFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFriendResponseValidationError) ErrorName() string {
	return "RemoveFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFriendResponseValidationError{}

// Validate checks the field values on GetFriendsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsRequestMultiError, or nil if none found.
func (m *GetFriendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetFriendsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendsRequestMultiError(errors)
	}

	return nil
}

// GetFriendsRequestMultiError is an error wrapping multiple validation errors
// returned by GetFriendsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFriendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsRequestMultiError) AllErrors() []error { return m }

// GetFriendsRequestValidationError is the validation error returned by
// GetFriendsRequest.Validate if the designated constraints aren't met.
type GetFriendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsRequestValidationError) ErrorName() string {
	return "GetFriendsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsRequestValidationError{}

// Validate checks the field values on GetFriendsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsResponseMultiError, or nil if none found.
func (m *GetFriendsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendsResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendsResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendsResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendsResponseMultiError(errors)
	}

	return nil
}

// GetFriendsResponseMultiError is an error wrapping multiple validation errors
// returned by GetFriendsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFriendsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsResponseMultiError) AllErrors() []error { return m }

// GetFriendsResponseValidationError is the validation error returned by
// GetFriendsResponse.Validate if the designated constraints aren't met.
type GetFriendsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsResponseValidationError) ErrorName() string {
	return "GetFriendsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsResponseValidationError{}

// Validate checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Friend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FriendMultiError, or nil if none found.
func (m *Friend) ValidateAll() error {
	return m.validate(true)
}

func (m *Friend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	if len(errors) > 0 {
		return FriendMultiError(errors)
	}

	return nil
}

// FriendMultiError is an error wrapping multiple validation errors returned by
// Friend.ValidateAll() if the designated constraints aren't met.
type FriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMultiError) AllErrors() []error { return m }

// FriendValidationError is the validation error returned by Friend.Validate if
// the designated constraints aren't met.
type FriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendValidationError) ErrorName() string { return "FriendValidationError" }

// Error satisfies the builtin error interface
func (e FriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendValidationError{}
