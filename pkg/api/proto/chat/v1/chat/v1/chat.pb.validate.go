// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/chat.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetConversationId()) < 1 {
		err := ChatMessageValidationError{
			field:  "ConversationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSenderId()) < 1 {
		err := ChatMessageValidationError{
			field:  "SenderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := ChatMessageValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTimestamp() == nil {
		err := ChatMessageValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetTimestamp(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = ChatMessageValidationError{
				field:  "Timestamp",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) <= 0 {
				err := ChatMessageValidationError{
					field:  "Timestamp",
					reason: "value must be greater than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on GetChatHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChatHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatHistoryRequestMultiError, or nil if none found.
func (m *GetChatHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetConversationId()) < 1 {
		err := GetChatHistoryRequestValidationError{
			field:  "ConversationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetChatHistoryRequestMultiError(errors)
	}

	return nil
}

// GetChatHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetChatHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChatHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatHistoryRequestMultiError) AllErrors() []error { return m }

// GetChatHistoryRequestValidationError is the validation error returned by
// GetChatHistoryRequest.Validate if the designated constraints aren't met.
type GetChatHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatHistoryRequestValidationError) ErrorName() string {
	return "GetChatHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChatHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatHistoryRequestValidationError{}

// Validate checks the field values on GetChatHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChatHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatHistoryResponseMultiError, or nil if none found.
func (m *GetChatHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChatHistoryResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChatHistoryResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChatHistoryResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChatHistoryResponseMultiError(errors)
	}

	return nil
}

// GetChatHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetChatHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChatHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatHistoryResponseMultiError) AllErrors() []error { return m }

// GetChatHistoryResponseValidationError is the validation error returned by
// GetChatHistoryResponse.Validate if the designated constraints aren't met.
type GetChatHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatHistoryResponseValidationError) ErrorName() string {
	return "GetChatHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChatHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatHistoryResponseValidationError{}
